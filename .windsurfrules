lokal proje klasörü: "C:\Users\BT\CascadeProjects\AutoTag_Deepseek"
Herhangi bir dosyada majör bir değişiklik yaparsan mutlaka proje klasörü içinde etkilenebilecek diğer dosyaları da kontrol etmeliyiz.

Proje Genel Bilgileri:
Proje Adı: AutoTag_Deepseek
Platform: Autodesk Revit 2022
Tür: Revit Add-in (Plugin)
Dil: C# (.NET Framework)
GitHub: https://github.com/BTankut/AutoTag_Deepseek

Projenin Amacı:
Revit projelerinde etiketlerin (tags) otomatik olarak düzenlenmesi
Etiketlerin yatay veya dikey olarak sıralanması
Kullanıcı tarafından seçilen başlangıç noktasına göre etiketlerin konumlandırılması

Ana Bileşenler:
TagsOrderingCommand.cs: Ana komut sınıfı, kullanıcı etkileşimini yönetir
TagSorter.cs: Etiket sıralama mantığını içerir
TagSelection.cs: Etiket seçim işlemlerini yönetir
AutoSortWithManualPlacement.cs: Etiketlerin manuel yerleşimini kontrol eder
RibbonHandler.cs: Revit ribbon arayüzünü yönetir
Logger.cs: Uygulama genelinde loglama işlemlerini yönetir

Temel İş Akışı:
Kullanıcı Revit ribbon'ından "AutoTag" butonuna tıklar
İlgili etiketleri seçer
Yatay/dikey sıralama yönünü belirler
Başlangıç noktasını seçer
Etiketler seçilen yöne göre otomatik olarak sıralanır

Önemli Teknik Detaylar:
Etiket aralığı: 100mm sabit mesafe
Koordinat sistemi: Revit internal koordinat sistemi kullanılır
Etiket validasyonu: IndependentTag tipinde elementler kontrol edilir
Transaction yönetimi: Her işlem için TransactionGroup kullanılır

Hata Yönetimi:
Try-catch blokları ile exception handling
Detaylı loglama (AppData klasöründe TagsOrdering.log)
Kullanıcı geri bildirimi için TaskDialog kullanımı

Kullanıcı Arayüzü:
BIRD testTask sekmesi altında Tags Tools paneli
AutoTag butonu
Yatay/Dikey sıralama seçim diyaloğu
İşlem sonucu bildirimleri
Önemli Dosya Konumları:

Plugin DLL: C:\ProgramData\Autodesk\Revit\Addins\2022\
Log dosyası: %AppData%\TagsOrdering.log
Addin dosyası: .addin formatında Revit Addins klasöründe

Versiyon Kontrolü:
GitHub üzerinde master branch kullanılır
Her commit İngilizce açıklama ve versiyon numarası içerir
Binary dosyalar (.dll, .pdb) GitHub'a dahil edilir

GitHub Çalışma Kuralları:

Branch Yapısı ve Geliştirme Süreci:
1. master: Ana branch, kararlı sürümler
2. develop: Geliştirme branch'i
3. Tüm geliştirmeler 'develop' branch'inde yapılır
4. Geliştirme tamamlandığında:
   - develop -> master merge yapılır
   - Her iki branch de GitHub'a push edilir

Versiyon Numaralandırma ve Commit Kuralları:
1. Format: Majör.Minör.Yama (örn: 1.1.2)
2. Her commit'te versiyon numarası artırılmalı
3. Commit mesajı formatı:
   - İlk satır: "Version X.X.X: Kısa açıklama"
   - Boş satır
   - Detaylı değişiklik listesi

Branch Senkronizasyonu:
1. master'a merge yapıldıktan sonra:
   - develop branch'i master ile güncellenir
   - Her iki branch de GitHub'a push edilir
2. Conflict durumunda:
   - Önce develop'daki değişiklikler commit edilmeli
   - Sonra master merge edilmeli